{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CSC232!","text":""},{"location":"#csc232-data-structures","title":"CSC232 - Data Structures","text":"<p>CSC232 is a continuation of CSC 131. Topics will include: algorithm design; complexity analysis; abstract data types and encapsulation; basic data structures and their application, including stacks, queues, linked lists and binary trees; dynamic memory allocation; recursion; sorting and searching; debugging techniques.</p> <p>Prerequisite: \"C\" or better in CSC 131; and MTH 261 or MTH 314 or MTH 315 or concurrent enrollment.</p>"},{"location":"#topics","title":"Topics","text":"<ul> <li>Review C++ Fundamentals</li> <li>Collections</li> <li>Sorting Algorithms</li> <li>Lists and Sorted Lists</li> <li>Stacks</li> <li>Queues and Priority Queues</li> <li>Trees</li> </ul>"},{"location":"#approach","title":"Approach","text":"<ul> <li>Hands-on, Test-Driven Development</li> <li>Continuous Development of the Analysis of Algorithms</li> </ul>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <p>This site uses a number of admonitions to highlight different points in different ways. For example, to the right of this paragraph, we see an inline note. Such an inline note may be used to highlight an ancillary point to the current topic. As you can see, the note floats to the right. Sometimes this will float on the left (by removing the <code>end</code> qualifier to the <code>inline</code> admonition).</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Abstract, Summary, or TLDR <p>abstract, summary, tldr</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info, or TODO <p>info, todo</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip, Hint, or Important <p>tip, hint, important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Success, Check, or Done <p>success, check, done</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question, Help, or FAQ <p>question, help, faq</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning, Caution, or Attention <p>warning, caution, attention</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Failure, Fail, or Missing <p>failure, fail, missing</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Danger, or Error <p>danger, error</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Quote, or Cite <p>quote, cite</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>See https://squidfunk.github.io/mkdocs-material/reference/admonitions/#usage</p>"},{"location":"#diagrams","title":"Diagrams","text":""},{"location":"#flowcharts","title":"Flowcharts","text":"<p>Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps:</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"#sequence-diagrams","title":"Sequence Diagrams","text":"<p>Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors:</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"#state-diagrams","title":"State Diagrams","text":"<p>State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states:</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"#class-diagrams","title":"Class Diagrams","text":"<p>Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them:</p> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"links/","title":"Useful Links","text":""},{"location":"syllabus/","title":"Contact Information","text":"Key Value Instructor Jim Daehn Email jdaehn@missouristate.edu Office 61M Cheek Hall"},{"location":"Collections/","title":"Collections","text":""},{"location":"Lists/","title":"Lists","text":""},{"location":"PriorityQueues/","title":"Priority Queues","text":""},{"location":"Queues/","title":"Queues","text":""},{"location":"Review/","title":"C++ Review","text":""},{"location":"Review/#language-basics","title":"Language Basics","text":""},{"location":"Review/#arrays","title":"Arrays","text":""},{"location":"Review/cpp-rev-01/","title":"Language Basics","text":""},{"location":"Review/cpp-rev-01/#a-simple-program","title":"A Simple Program","text":"<p>Let's take a look a simple C++ program.</p> <pre><code>#include &lt;iostream&gt;\n/**\n * Entry point of this application.\n */\nint main()\n{\nconst double PI = 3.14159;\ndouble radius;\n\nstd::cout &lt;&lt; \"Enter the radius of the sphere: \";\nstd::cin &gt;&gt; radius;\ndouble volume = 4 * PI * radius * radius * radius / 3;\nstd::cout &lt;&lt; \"The volume of a sphere of radius \"\n&lt;&lt; radius &lt;&lt; \" inches is \" &lt;&lt; volume\n&lt;&lt; \" cubic inches.\\n\";\nreturn EXIT_SUCCESS;\n} // end program\n</code></pre> <p>We could compile this program as such:</p> <pre><code>$ g++ -std=c++11 foo.cpp\n$ ./a.out\nEnter the radius of the sphere: 3.4\nThe volume of a sphere of radius 3.4 inches is 164.636 cubic inches.\n$\n</code></pre>"},{"location":"Review/cpp-rev-02/","title":"Arrays","text":"<p>Arrays are primitive data structures that contain items all of the same type laid out in contiguous memory locations.</p> <pre><code>const int DAYS_PER_WEEK{ 7 };\ndouble maxTemps[ DAYS_PER_WEEK ];\n</code></pre>"},{"location":"Review/decl/","title":"Declarations","text":""},{"location":"SortedLists/","title":"Sorted Lists","text":""},{"location":"Sorting/","title":"Sorting Algorithms","text":""},{"location":"Stacks/","title":"Stacks","text":""},{"location":"Trees/","title":"Trees","text":""}]}